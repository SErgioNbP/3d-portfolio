/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: marzipanne (https://sketchfab.com/marzipanne)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/camping-low-poly-d05f47384a6046ecaf39f857bd06c5a9
Title: Camping Low Poly
*/
import { useEffect, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { a } from '@react-spring/three';
import { useFrame, useThree } from "@react-three/fiber";

import campingScene from '../assets/3d/camping.glb';

const Camping = ({ isRotating, setIsRotating, setCurrentStage, ...props }) => {
  const campingRef = useRef();

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(campingScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.90; // Slower damping

  const handlePointerDown = (e) => {
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  }

  const handlePointerUp = () => {
    setIsRotating(false);
  }

  const handlePointerMove = (event) => {
    if (isRotating) {
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;
      const delta = (clientX - lastX.current) / viewport.width;

      // Reduce rotation speed
      campingRef.current.rotation.y += delta * 0.008 * Math.PI;
      lastX.current = clientX;

      rotationSpeed.current = delta * 0.008 * Math.PI;
    }
  };

  // Touch events for mobile devices
  const handleTouchStart = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  }

  const handleTouchEnd = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }

  const handleTouchMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;

      islandRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    canvas.addEventListener("touchstart", handleTouchStart);
    canvas.addEventListener("touchend", handleTouchEnd);
    canvas.addEventListener("touchmove", handleTouchMove);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      canvas.removeEventListener("touchstart", handleTouchStart);
      canvas.removeEventListener("touchend", handleTouchEnd);
      canvas.removeEventListener("touchmove", handleTouchMove);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      campingRef.current.rotation.y += rotationSpeed.current;
    }

    // Stage detection with intervals
    const rotation = campingRef.current.rotation.y;
    const normalizedRotation =
      ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

    // Defined stages with specific rotation ranges and neutral zones
    const stages = [
      { start: 0.75, end: 0.1, stage: 1 },      // First stage
      { start: 1.5, end: 0.75, stage: null },   // Neutral zone
      { start: 2.3, end: 1.5, stage: 2 },      // Second stage
      { start: 3.5, end: 2.3, stage: null },   // Neutral zone
      { start: 4.3, end: 3.5, stage: 3 },      // Third stage
      { start: 5.2, end: 4.3, stage: null },   // Neutral zone
      { start: 6.3, end: 5.2, stage: 4 },     // Fourth stage
    ];


    //console.log('rotation', normalizedRotation);

    // Find the current stage
    const currentStageObj = stages.find(
      s => normalizedRotation >= s.start && normalizedRotation <= s.end
    );

    // Update the stage
    if (currentStageObj) {
      setCurrentStage(currentStageObj.stage);
    }

    //console.log('stage', currentStageObj?.stage);
  });


  return (
    <a.group
      ref={campingRef}
      {...props}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh geometry={nodes.defaultMaterial.geometry} material={materials.TELEPHONE_WHITE} />
          <mesh geometry={nodes.defaultMaterial_1.geometry} material={materials.TELEPHONE_SCREEN} />
          <mesh geometry={nodes.defaultMaterial_2.geometry} material={materials.TELEPHONE_BLUE} />
          <mesh geometry={nodes.defaultMaterial_3.geometry} material={materials.METAL_WHITE} />
          <mesh geometry={nodes.defaultMaterial_4.geometry} material={materials.FIREWOOD} />
          <mesh geometry={nodes.defaultMaterial_5.geometry} material={materials.BAGE_DARK} />
          <mesh geometry={nodes.defaultMaterial_6.geometry} material={materials.BAGE} />
          <mesh geometry={nodes.defaultMaterial_7.geometry} material={materials.HEADLIGHT_VESPA} />
          <mesh geometry={nodes.defaultMaterial_8.geometry} material={materials.HEADLIGHT_RED} />
          <mesh geometry={nodes.defaultMaterial_9.geometry} material={materials.VESPA_WHITE} />
          <mesh geometry={nodes.defaultMaterial_10.geometry} material={materials.VESPA_BLUE} />
          <mesh geometry={nodes.defaultMaterial_11.geometry} material={materials.GROUND_DARK} />
          <mesh geometry={nodes.defaultMaterial_12.geometry} material={materials.GROUND} />
          <mesh geometry={nodes.defaultMaterial_13.geometry} material={materials.BUSH_1} />
          <mesh geometry={nodes.defaultMaterial_14.geometry} material={materials.BUSH} />
          <mesh geometry={nodes.defaultMaterial_15.geometry} material={materials.GRASS} />
          <mesh geometry={nodes.defaultMaterial_16.geometry} material={materials.LEAVES} />
          <mesh geometry={nodes.defaultMaterial_17.geometry} material={materials.BARK} />
          <mesh geometry={nodes.defaultMaterial_18.geometry} material={materials.CONE} />
          <mesh geometry={nodes.defaultMaterial_19.geometry} material={materials.BOX_BROUN} />
          <mesh geometry={nodes.defaultMaterial_20.geometry} material={materials.RUBBER_BLACK} />
          <mesh geometry={nodes.defaultMaterial_21.geometry} material={materials.METALL_GRAY} />
          <mesh
            geometry={nodes.defaultMaterial_22.geometry}
            material={materials.TENT_FABRIC_BLUE}
          />
          <mesh
            geometry={nodes.defaultMaterial_23.geometry}
            material={materials.TENT_FABRIC_LIGHT}
          />
          <mesh geometry={nodes.defaultMaterial_24.geometry} material={materials.FIRE} />
        </group>
      </group>
    </a.group>
  )
}

export default Camping;